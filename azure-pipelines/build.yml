# Build pipeline template

steps:

  - task: UseDotNet@2
    displayName: Use SDK
    inputs:
      packageType: 'sdk'
      useGlobalJson: true

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: 'restore'
      arguments: -c $(BuildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: 'build'
      arguments: -c $(BuildConfiguration) --no-restore

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: 'test'
      publishTestResults: true
      arguments: -c $(BuildConfiguration) --no-build

  # Since Azure Pipelines isn't able to merge several coverage reports
  # (from different projects) do it manually with the tool

  - task: DotNetCoreCLI@2
    displayName: Restore tools
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: restore

  - task: DotNetCoreCLI@2
    displayName: Generate coverage
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: >-
        run reportgenerator
        -reports:test/**/coverage.cobertura.xml
        -targetdir:.coverage
        -reporttypes:Cobertura

  - task: PublishCodeCoverageResults@1
    displayName: Publish coverage
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '.coverage/Cobertura.xml'

  - task: DotNetCoreCLI@2
    displayName: Pack
    inputs:
      command: 'custom'
      projects: 'src/**/*.csproj'
      custom: 'pack'
      arguments: >-
        -c $(BuildConfiguration)
        -o $(Build.ArtifactStagingDirectory)
        -p:VersionSuffix=$(VersionSuffix)
        -p:RepositoryBranch=$(Build.SourceBranch)
        -p:RepositoryCommit=$(Build.SourceVersion)
        --no-build
